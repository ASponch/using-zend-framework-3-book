# Zend Skeleton Application {#skeleton}

Zend Framework 3 provides you with the so called "skeleton application" to make it easier to create 
your new websites from scratch. In this chapter, we will show how to install the skeleton 
application and how to create an Apache virtual host. It is recommended that you refer to 
[Appendix A. Configuring Web Development Environment](#devenv) before reading this chapter to get your development 
environment configured.

## Getting Zend Skeleton Application

The Skeleton Application is a simple ZF3-based application that contains 
most necessary things for creating your own website. 

The skeleton application's code is stored on GitHub code hosting and can be publicly 
accessed by [this link](https://github.com/zendframework/ZendSkeletonApplication).
However, you typically do not download the source code of the skeleton application directly, 
instead you use [Composer](http://getcomposer.org/) dependency manager, as shown below.

First, you need to get the latest version of Composer. You do this with the following commands:

```
cd ~

php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"

php composer-setup.php

php -r "unlink('composer-setup.php');"
```

The commands above change your working directory to be your home directory, download the `composer-setup.php` installer script 
to your working directory, run it, and, finally, remove the installer. 

T> Once you run the commands above, you should have the `composer.phar` file in your working directory.

Now, type the following command from your command prompt:

```
php composer.phar create-project -sdev zendframework/skeleton-application helloworld
```

The command above downloads the Zend Skeleton Application to `helloworld` directory and runs its 
interactive installer. You now should answer several yes/no questions by typing `y` or `n` and pressing Enter.
Your answers will help the installer to determine which dependencies to install.
If you don't know what to answer, answer 'n' (no); you will be able to install additional dependencies
later at any time.

For the beginning, you can answer the questions the following way:

```
    Do you want a minimal install (no optional packages)? Y/n
n

    Would you like to install the developer toolbar? y/N
n

    Would you like to install caching support? y/N
n

    Would you like to install database support (installs zend-db)? y/N
n

    Would you like to install forms support? y/N
y
    Will install zendframework/zend-mvc-form (^1.0)
    When prompted to install as a module, select application.config.php or modules.config.php

    Would you like to install JSON de/serialization support? y/N
n

    Would you like to install logging support? y/N
n

    Would you like to install MVC-based console support? (We recommend migrating to zf-console, symfony/console, or Aura.CLI) y/N
n

    Would you like to install i18n support? y/N
n

    Would you like to install the official MVC plugins, including PRG support, identity, and flash messages? y/N
n
    Will install zendframework/zend-mvc-plugins (^1.0.1)
    When prompted to install as a module, select application.config.php or modules.config.php

    Would you like to use the PSR-7 middleware dispatcher? y/N
n

    Would you like to install sessions support? y/N
n
    Will install zendframework/zend-session (^2.7.1)
    When prompted to install as a module, select application.config.php or modules.config.php

    Would you like to install MVC testing support? y/N
n
    Will install zendframework/zend-test (^3.0.1)

    Would you like to install the zend-di integration for zend-servicemanager? y/N
n
```

Once you answer the questions, the installer will download and install all necessary packages and asks
you to which config file you would like to inject information about installed modules. When prompted,
type '1' and press Enter:

```
 Please select which config file you wish to inject 'Zend\Form' into:
  [0] Do not inject
  [1] config/modules.config.php
  [2] config/development.config.php.dist
  Make your selection (default is 0):1

  Remember this option for other packages of the same type? (y/N) y
```

Next, the installer will ask you if you would like to remove existing version control files from the project.
Since you will probably store your web application in your own version control system (like Git) and do not need
existing VCS files, type 'y' and press Enter:

```
Do you want to remove the existing VCS (.git, .svn..) history? [Y,n]? y
```

Now copy `composer.phar` file to your new `helloworld` directory:

```
cp composer.phar helloworld
```

And final and very important step is enabling the *development mode* by typing the following command:

~~~
php composer.phar development-enable
~~~ 

I> The development mode is typically used when you *develop* your application. When you enable the development
I> mode additional "development" configuration files are created in your web application's `config` directory. In this 
I> mode your application may optionally load additional "development" modules. Configuration caching
I> is also disabled in this mode allowing you to change your website's configuration files and see the changes immediatelly.
I>
I> Once you have finished the development, you can enable the *production* mode by typing the following:
I> 
I> `php composer.phar development-disable`

Congratulations! The hard work is done. Now let's look inside the `helloworld` directory.

## Typical Directory Structure

Every ZF3-based website (including the skeleton application) is organized in the same recommended way. 
Of course, you can configure your application to use a different directory layout, but this may 
make it difficult to support your website by other people who are not familiar
with such a directory structure.

Let's have a brief look at the typical directory structure (see figure 2.2):

![Figure 2.2. Typical Directory Structure](images/skeleton/skeleton_dir_structure.png)

As you can see, in the top-level directory (we will denote it `APP_DIR` from now on),
there are several files:

* `README.md` is a text file containing a brief description of the skeleton application. You typically
  will replace this file contents with the information about your web site: its name, what it does,
  and how to install it.
   
* `LICENSE.txt` is a text file containing ZF3 license (you had a chance to read it in 
 [Introduction to Zend Framework 3](#intro)).
  Do not remove or modify this file, because ZF3 license doesn't allow to do so. 
   
* `composer.phar` is an executable PHP archive containing the code 
  of Composer dependency management tool; we will use it later.
  
* `composer.json` is a JSON configuration file for Composer.

And we also have several subdirectories:

The `config` directory contains application-level configuration files.

The `data` directory contains the data your application might create; it may also contain cache used to speed-up Zend Framework.

The `module` directory contains all application modules. Currently there is a 
single module called `Application`. The `Application` is the main module of your 
website. You can also put other modules here, if you wish. We will talk about
the modules a little bit later.

The `vendor` directory's purpose is to contain third-party library files, including 
Zend Framework 3 library files. This directory is typically populated by Composer.

The `public` directory contains data publicly accessible by the web-user. As you can see, web-users
will mainly communicate with the `index.php`, which is also called the *entry point* of your web site.

I>Your web site will have a single entry point, *index.php*, because this is more secure than allowing
I>anyone to access all your PHP files.

Inside of the `public` directory, you can also find `.htaccess` file. Its main purpose is to define 
URL rewriting rules. 

The `public` directory contains several subdirectories also publicly accessible by web-users:

* `css` subdirectory contains all publicly accessible CSS files;
* `img` subdirectory contains publicly accessible images (*.JPG, *.PNG, *.GIF, *.ICO, etc.);
* and `js` subdirectory stores publicly accessible JavaScript files used by your web-pages. 
  Typically, files of [jQuery](http://jquery.com/) library are placed here, but you can put your own JavaScript files here, too.        

Q> **What is jQuery library?**
Q> 
Q> jQuery is a JavaScript library which was created to simplify the client-side scripting of HTML
Q> pages. jQuery's selector mechanism allows to easily attach event handlers to certain HTML elements, making
Q> it really simple to make your HTML pages interactive.
  
Because the Zend Skeleton Application is stored on GitHub, inside of the directory structure, 
you can find hidden `.gitignore` file. This is a [GIT](http://git-scm.com/) version control 
system's files. You can ignore it (or even remove them if you do not plan to store your code in a GIT repository).

## Application Dependencies

A dependence is some third-party code your app uses. For example Zend Framework 3 is the dependence for your web-site. 

In Composer, any library is called *a package*. All packages installable by Composer
are registered on [Packagist.org](https://packagist.org/) site. 
With Composer, you can identify the packages that your app requires and have Composer to download and install them automatically.

The dependencies of the skeleton application are declared in `APP_DIR/composer.json` file (see below):

{line-numbers=off,lang=text, title="Contents of composer.json file"}
~~~
{
    "name": "zendframework/skeleton-application",
    "description": "Skeleton Application for Zend Framework zend-mvc applications",
    "type": "project",
    "license": "BSD-3-Clause",
    "keywords": [
        "framework",
        "mvc",
        "zf2"
    ],
    "homepage": "http://framework.zend.com/",
    "minimum-stability": "dev",
    "prefer-stable": true,
    "require": {
        "php": "^5.6 || ^7.0",
        "zendframework/zend-component-installer": "^1.0 || ^0.3 || ^1.0.0-dev@dev",
        "zendframework/zend-mvc": "^3.0.1",
        "zfcampus/zf-development-mode": "^3.0",
        "zendframework/zend-mvc-form": "^1.0",
        "zendframework/zend-mvc-plugins": "^1.0.1",
        "zendframework/zend-session": "^2.7.1"
    },
    "autoload": {
        "psr-4": {
            "Application\\": "module/Application/src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "ApplicationTest\\": "module/Application/test/"
        }
    },
    "extra": [],
    "scripts": {
        "development-disable": "zf-development-mode disable",
        "development-enable": "zf-development-mode enable",
        "development-status": "zf-development-mode status",
        "serve": "php -S 0.0.0.0:8080 -t public/ public/index.php"
    }
}
~~~

Q> **What is JSON?**
Q>
Q>JSON (JavaScript Object Notation), is a text-based file format used for human-readable 
Q>representation of simple structures and nested associative arrays. Although JSON 
Q>originates from Java, it is used in PHP and in other languages, because
Q>it is convenient for storing configuration data. 

In that file, we see some basic info on the skeleton application (its name,
description, license, keywords and home page). You will typically change this info for your future
web-sites. This information is optional, so you can even safely remove it,
if you do not plan to publish your web application on `Packagist` catalog.

What is interesting for us now is the `require` key. The `require`
key contains the dependencies declarations for our application. We see that we
require PHP engine version 5.6 or later and several Zend Framework components, like `zend-mvc`, `zend-form`, etc.

The information contained in `composer.json` file is enough to locate the
dependencies, download and install them into the `vendor` subdirectory. If at any time you determine
that you need to install another dependency, you can do that by editing `composer.json` and adding your dependency in it, 
and then typing the following commands from your command shell:

{line-numbers=off}
~~~
php composer.phar self-update
php composer.phar install
~~~

The commands above will self-update the Composer to the latest available version, and then
install your dependencies. By the way, Composer does not install PHP for you,
it just ensures PHP has an appropriate version, and if not, it will warn you. 

If you look inside the `vendor` subdirectory, you can see that it contains a lot of files.
Zend Framework 3 files can be found inside the `APP_DIR/vendor/zendframework/`
directory (figure 2.3). 

![Figure 2.3. Vendor directory](images/skeleton/vendor_dir.png)

I> In some other frameworks, another (conventional) way of dependency installation is used.
I> You just download the dependency library as an archive, unpack it and put it somewhere inside of your
I> directory structure (typically, to `vendor` directory). This approach was used in Zend Framework 1.
I> But, in Zend Framework 3, you are recommended to install dependencies with Composer.

## Apache Virtual Host

Now we are almost ready to get our skeleton web-site live! The last thing we 
are going to do is configure an Apache virtual host. A virtual host term means 
that you can run several web-sites on the same machine. The virtual sites are 
differentiated by domain name (like `site.mydomain.com` and `site2.mydomain.com`) or
by port number (like `localhost` and `localhost:8080`). Virtual hosts work 
transparently for site users, that means users have no idea whether the sites are 
working on the same machine or on different ones.

Currently, we have the skeleton application inside of your home directory. To let Apache know
about it, we need to edit the virtual host file. 

I> Virtual host file may be located at a different path, depending on your operating system type. 
I> For example, in Linux Ubuntu it is located in `/etc/apache2/sites-available/000-default.conf` file.
I> For OS- and server-specific information about virtual hosts, please refer to [Appendix A](#devenv).

Let's now edit the default virtual host file to make it look like below: 

{line-numbers=on,lang=text, title="Virtual host file"}
~~~
<VirtualHost *:80>
    ServerAdmin webmaster@localhost

    DocumentRoot /home/username/helloworld/public
    <Directory />
        Options FollowSymLinks
        AllowOverride None		
    </Directory>
    <Directory /home/username/helloworld/public/>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        Allow from all
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel warn

</VirtualHost>
~~~

Line 1 of the file makes Apache to listen to all (*) IP addresses on port 80.

Line 2 defines the web master's E-mail address. If something bad happens to the 
site, Apache sends an alert E-mail to this address. You can enter your E-mail
here.

Line 4 defines the document root directory (`APP_DIR/public`). All files and directories
under the document root will be accessible by web-users. You should set
this to be the absolute path to skeleton application's `public` directory.
So, the directories and files inside `public` (like `index.php`, `css`, `js`, etc.)
will be accessible, while directories and files above `public` directory (like 
`config`, `module`, etc.) wont' be accessible by web users, which enhances the 
security of the website.

Lines 5-8 define default access rules for directories. These rules are rather strict.
The `Options FollowSymLinks` directive allows Apache to follow symbolic links 
(in Linux, a symbolic links is an analog of a shortcut in Windows). The `AllowOverride None`
directive forbids overriding any rules using `.htaccess` files.

Lines 9-14 define rules for the document root directory (`APP_DIR/public`). These
rules override the default rules mentioned above. For example, the `AllowOverride All` directive
allows to define any rules in `.htaccess` files. The `Order allow,deny` and `allow from all` control
a three-pass access control system, effectively allowing everyone to visit the site.

Line 16 defines the path to `error.log` file, which can be used to troubleshoot possible errors 
occurring in your site code. Line 23 defines the logging level to use (the `warn` means that
warnings and errors will be written to log).

Lines 18-19 are comments and ignored by Apache. You mark comments with the hash 
(#) character. 

W> Zend Framework 2 utilizes Apache's URL rewriting module for redirecting 
W> web-users to entry script of your web-site. Please ensure that your web-server
W> has `mod_rewrite` module enabled. For instructions on how to enable the module, please
W> refer to [Appendix A](#devenv).

T> After editing the config file, do not forget to restart Apache to apply your changes.

## Opening the Web Site in Your Browser

To open the web site, type "http://localhost" in your browser's navigation bar and press Enter.
Figure 2.3 shows the site in action.

On the page that appears, you can see the navigation menu at the top. The navigation bar currently
contains the single link named *Home*.
Under the navigation bar, you can see the "Welcome to Zend Framework" caption. Below
the caption, you can find some advices for beginners on how to develop new ZF3-based
applications.

![Figure 2.3. Zend Skeleton Application](images/skeleton/zend_skeleton_default_view.png)

## Creating NetBeans Project

Now that we have the skeleton application set up and working, we will want to change something
with it in the future. To easily navigate the directory structure, edit files and debug the 
web site, the common practice is to use an IDE (Integrated Development Environment). In this book, we
use NetBeans IDE (see [Appendix A](#devenv) for more information on how to install NetBeans). 

To create NetBeans project for our skeleton application, run NetBeans and open menu 
*File->New Project...*. The *New Project* dialog appears (see figure 2.4).

In the *Choose Project* page that appears, you should choose PHP project type 
and in the right list select *Application with Existing Source*
(because we already have the skeleton application's code). Then click the *Next* button to go to the next page 
(shown in figure 2.5).  

In the *Name and Location* dialog page, you should enter the path to the code (like */home/username/helloworld*),
the name for the project (for example, `helloworld`) and specify the version of PHP your code uses (PHP 5.3 or later). 
The PHP version is needed for the NetBeans PHP syntax checker which will scan your PHP code for errors and
highlight them. Press the *Next* button to go to the next dialog page (shown in figure 2.6).

![Figure 2.4. Creating NetBeans Project - Choose Project Page](images/skeleton/netbeans_create_project.png)

![Figure 2.5. Creating NetBeans Project - Name and Location Page](images/skeleton/netbeans_create_project_step2.png)

![Figure 2.6. Creating NetBeans Project - Choosing Configuration Page](images/skeleton/netbeans_create_project_step3.png)

In the *Run Configuration* page, it is recommended that you specify the way you run the web site (Local Web 
Site) and web site URL (`http://localhost`). Keep the *Index File* field empty (because we are using `mod_rewrite`,
the actual path to your `index.php` file is hidden by Apache). If you are seeing the warning message like 
"Index File must be specified in order to run or debug project in command line", just ignore it. 

Click the *Finish* button to create the project. When the *helloworld* project 
has been successfully created, you should see the project window (see the figure 2.7).

In the project window, you can see the menu bar, the tool bar, 
the *Projects* pane where your project files are listed, and, in the right
part of the window, you can see the code of the `index.php` entry file.

Please refer to [Appendix B](#netbeans) 
for more NetBeans usage tips, including launching and interactively debugging 
ZF2-based web sites. 

T> **It's time for some advanced stuff...**
T> 
T> Congratulations! We've done the hard work of installing and running 
T> the Zend Skeleton Application, and now it's time to have a rest 
T> and read about some advanced things in the last part of this chapter.


