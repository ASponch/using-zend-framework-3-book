## Hypertext Access File (.htaccess)

We've mentioned the `APP_DIR/public/.htaccess` file when talking about typical
directory structure. Now let's try to understand the role of this file. 

![Figure 2.7. NetBeans Project Window](images/skeleton/netbeans_project_window.png)

The `.htaccess` (hypertext access) file is actually an Apache web server's 
configuration file allowing to override some web server's global configuration. 
The `.htaccess` file is a directory-level configuration, which means it 
affects only its owning directory and all sub-directories.

The content of `.htaccess` file is presented below:

{line-numbers=on,lang=text}
~~~
RewriteEngine On
# The following rule tells Apache that if the requested filename
# exists, simply serve it.
RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*$ - [L]
# The following rewrites all other queries to index.php. The 
# condition ensures that if you are using Apache aliases to do
# mass virtual hosting or installed the project in a subdirectory,
# the base path will be prepended to allow proper resolution of
# the index.php file; it will work in non-aliased environments
# as well, providing a safe, one-size fits all solution.
RewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\2$
RewriteRule ^(.*) - [E=BASE:%1]
RewriteRule ^(.*)$ %{ENV:BASE}/index.php [L]
~~~

Line 1 tells Apache web server to enable URL rewrite engine (`mod_rewrite`).  The rewrite engine modifies
the incoming URL requests, based on regular expression rules.
This allows you to map arbitrary URLs onto your internal URL structure in any way you like.

Lines 4 - 7 define rewrite rules that tell the web server that if the client (web browser)
requests a file that exists in the document root directory, than to return the contents of that
file as HTTP response. Because we have our `public` directory inside of the virtual host's document root,
we allow site users to see all files inside of the `public` directory, including `index.php`, 
CSS files, JavaScript files and image files.

Lines 14 - 16 define rewrite rules that tell Apache what to do if the site user requests a file
which does not exist in document root. In such a case, the user should be redirected to `index.php`.

Table 2.2 contains several URL rewrite examples. The first and second URLs point to existing
files, so `mod_rewrite` returns the requested file paths. The URL in the third example 
points to a non-existent file `htpasswd` (which may be a symptom of a hacker atack), 
and based on our rewrite rules, the engine returns `index.php` file.

{title="Table 2.2. URL rewrite examples"}
|-------------------------------------|-----------------------------------------|
| **Requested URL**                   | **Rewritten URL**                       |
|-------------------------------------|-----------------------------------------|
| `http://localhost/index.php`        | File exists; return the local file      |
|                                     | `APP_DIR/public/index.php`              |
|-------------------------------------|-----------------------------------------|
| `http://localhost/css/bootstrap.css`| File exists; return the local file      | 
|                                     | `APP_DIR/public/css/bootstrap.css`      |
|-------------------------------------|-----------------------------------------|
| `http://localhost/htpasswd`         | File does not exist; return             |
|                                     | `APP_DIR/public/index.php` instead.     |
|-------------------------------------|-----------------------------------------|

## Blocking Access to the Web Site by IP Address

Sometimes it may be required to block access to your web site from all other IP addresses except yours.
For example, when you develop a web site, you don't want someone to see your incomplete work. Also,
you may not want to let Google or other search engines to index your web site.

To forbid access to your site, you can modify the virtual host and add the following lines to it:

{line-numbers=on,lang=text}
~~~
Order allow,deny
Deny from all
Allow from 127.0.0.1
~~~

Line 1 defines the order. `Order allow deny` means allow everything which is not denied. 

Line 2 forces Apache to deny access to your site for everyone.

Line 3 overrides the line 2, allowing access to your site from IP 127.0.0.1 (localhost). You may need
to replace 127.0.0.1 with your external IP address.

Q> **How do I determine my IP address?**
Q>
Q> You can use the [http://www.whatismyip.com](http://www.whatismyip.com/) web site to determine 
Q> your external IP address. The external IP address is the address by which other 
Q> computers on the Internet may access your site.

## HTTP Authentication

You may want to allow access to your site to certain users. For example, when you are 
demonstrating your web site to your boss, you will give her username and password for
logging into your site.

To allow access to your web site by username and password, you can modify the virtual host 
file and add the following lines to it:

{line-numbers=on,lang=text}
~~~
AuthUserFile /usr/local/apache/passwd/passwords
AuthType Basic
AuthName "Authentication Required"
require valid-user
~~~

Line 1 defines the file where passwords will be stored. This file should be created
with the `htpasswd` utility.

Line 2 defines Basic authentication method. The most common method is 
Basic. It is important to 
be aware, however, that Basic authentication sends the password from the client 
to the server unencrypted. This method should therefore not be used for highly 
sensitive data. Apache supports one other authentication 
method: AuthType Digest. This method is much more 
secure. Most recent browsers support Digest authentication.

Line 3 defines the text that will be displayed to user when he tries to log in.

Line 4  will allow anyone to log in that is listed in the password file, 
and who correctly enters their password.

To create `passwords` file, type the following command:

`htpasswd -c /usr/local/apache/passwd/passwords <username>`

In the command above, you should replace the `<username>` placeholder 
with the name of the user. You can choose an arbitrary name, for example "admin".
The command will request the user's password and write the password to the file:

{line-numbers=off,lang=text}
~~~
# htpasswd -c /usr/local/apache/passwd/passwords <username>
New password: 
Re-type new password: 
Adding password for user <username>
~~~

When the user tries to visit the site, he sees the HTTP authentication dialog (see the figure below).
To log into your site, the visitor should enter the correct username and password.  

I> For additional information on HTTP authentication, you can refer to 
I> [Authentication and Authorization](http://httpd.apache.org/docs/current/howto/auth.html)
I> topic of Apache documentation.

## Having Multiple Virtual Hosts

When developing several web sites on the same machine, you will want to create
several virtual hosts. For each virtual host you need to specify a domain name (like `site1.mydomain.com`).
But if you currently don't have a domain name, you can specify a different port instead 
(see the example below).

{line-numbers=off,lang=text}
~~~
# Listen directive tells Apache to listen requests on port 8080
Listen 8080

NameVirtualHost 8080

<VirtualHost *:8080>
    ...
</VirtualHost>
~~~

To access the web site, in your browser's navigation bar, enter "http://localhost:8080".

T> After editing the virtual host config file, you should restart Apache to apply changes.

## Hosts File

When you have multiple local web sites mapped to different ports, it becomes difficult
to remember which port each site presents. To simplify this, you can
define an alias for your web site. 

To do this, you should edit the `hosts` file. The `hosts` file is a system file
which contains mappings between IP addresses and host names. The hosts file contains 
lines of text consisting of an IP address in the first text field followed by one or 
more host names.

To add an alias for your local web sites, add lines for each of your web site as 
shown in the example below. 

{line-numbers=off,lang=text}
~~~
127.0.0.1            site1.localhost
127.0.0.1:8080       site2.localhost
~~~

So now you'll be able to simply enter "site1.localhost" in your browser's address bar
instead of remembering the port number.

I> In Linux, the hosts file is located in `/etc/hosts`.
I> In Windows, the file is typically located in `C:\Windows\System32\drivers\etc\hosts`.
I> To edit the file, you need to be an administrator. Please also note that some
I> anti-virus software may block changes to hosts file, so you'll have to temporarily disable
I> your anti-virus to edit the file, and enable it after.

## Advanced Composer Usage

Earlier in this chapter, we have used Composer to install Zend Framework 2 library code. 
Now let's briefly describe some advanced Composer usage examples.

As we already know, the only required key in the `composer.json` file is `require`. This key
tells what packages are required by your application:

{line-numbers=off,lang=text}
~~~
{
    "require": {
        "php": "^5.6 || ^7.0",
        "zendframework/zend-component-installer": "^1.0 || ^0.3 || ^1.0.0-dev@dev",
        "zendframework/zend-mvc": "^3.0.1",
        "zfcampus/zf-development-mode": "^3.0",
        "zendframework/zend-mvc-form": "^1.0",
        "zendframework/zend-mvc-plugins": "^1.0.1",
        "zendframework/zend-session": "^2.7.1"
    }
}
~~~

### Package Names and Versions

A package name consists of two parts: vendor name and project name. For example
"zendframework/zend-mvc" package name consists of "zendframework" vendor name
and "zend-mvc" project name. You can search for other packages from "zendframework"
vendor through [Packagist.org](https://packagist.org/search/?q=zendframework) web site (see
the figure 2.8 for an example).

A package also has an associated version number. A version number consists of major number, minor number,
optional build number, and optional stability suffix (.e.g b1, rc1). Within the `require` key we specify which
versions of the package are acceptable. For example, "^5.6" means that we can install
versions greater than "5.6", but lower than "6.0" (that we can install only those packages that do not break
backwards compatibility). In table 2.1, possible ways of specifying acceptable versions are presented:

![Figure 2.8. You can search packages on Packagist.org](images/skeleton/packagist_search.png)

{title="Table 2.1. Package Version Definitions"}
|-------------------------|----------------------------------------------------------------------------|
| Definition Example      | Description                                                                |
|-------------------------|----------------------------------------------------------------------------|
| 3.0.1                   | Exact version. In this example, only the version 3.0.1 can be installed.   | 
|-------------------------|----------------------------------------------------------------------------|
| >=3.0.1                 | Greater or equal version can be installed (3.0.1, 3.2.1, etc.)             |
|-------------------------|----------------------------------------------------------------------------| 
| >3.0.1                  | Greater version can be installed (3.0.2 etc.)                              |
|-------------------------|----------------------------------------------------------------------------| 
| <=3.0.1                 | Lower or equal version can be installed (1.0, 1.5, 2.0.0 etc.)             |
|-------------------------|----------------------------------------------------------------------------| 
| <3.0.1                  | Lower version can be installed (1.0, 1.1, 1.9, etc.)                       |
|-------------------------|----------------------------------------------------------------------------| 
| !=3.0.1                 | All versions except this version can be installed.                         | 
|-------------------------|----------------------------------------------------------------------------|
| >=3.0,<3.1.0            | Any version belonging to this range of versions can be installed.          |
|-------------------------|----------------------------------------------------------------------------|
| 3.*                     | Any version having major number equal to 3 can be installed (minor number  |
|                         | can be any).                                                               |
|-------------------------|----------------------------------------------------------------------------|
| ~3.0                    | Any version starting from 3.0, but lower than the next major version       |
|                         | (equivalent to >=3.0,<4.0).                                                | 
|-------------------------|----------------------------------------------------------------------------|
| ^3.0                    | Any version starting from 3.0, but lower than the next major version       |
|                         | (equivalent to >=3.0,<4.0). Similar to `~3.0`, but it sticks closer to     |
|                         | semantic versioning, and will always allow non-breaking updates.           | 
|-------------------------|----------------------------------------------------------------------------|

### Installing and Updating Packages

We've seen how to use the `php composer.phar install` command to install our dependencies. As soon as you call this
command, Composer will find, download and install the dependencies to your `vendor` subdirectory.

Q> **Is it safe to install dependencies with Composer?**
Q>
Q> Well, some people may be afraid of Composer-style dependency management, 
Q> because they think someone can update the dependencies system-wide by mistake or intentionally, 
Q> causing the web application to 
Q> break. Note, that Composer *never* installs these
Q> system-wide, instead it installs them into your `APP_DIR/vendor/` directory.

After installation, Composer also creates the `APP_DIR/composer.lock` file. This file now contains
actual versions of the packages that were installed. If you run the `install` command again,
Composer will encounter the `composer.lock` file, check which dependencies already installed and
as all packages already installed, it just exits without doing anything. 

Now assume that in some period of time new security updates for your dependency packages are released. 
You will want to update your packages to keep your web site secure. You can do that by typing the following:

`php composer.phar update`

If you want to update only a single dependency, type its name as the following:

`php composer.phar update zendframework/zend-mvc`

After the `update` command, your `composer.lock` file will be updated, too.

Q> **What do I do if I want to roll back to a previous version of the package?**
Q>
Q> If the update procedure resulted in unwanted problems with your system, you can roll back
Q> by reverting the changes to your `composer.lock` file and issuing the `install` command again.
Q> Reverting changes to `composer.lock` is easy if you use a version control system, like GIT or SVN.
Q> If you don't use a version control system, make a backup copy of `composer.lock` before updating.

### Adding a New Dependency

If you want to add new dependency to the application, you can either edit `composer.json`
manually, or issue `require` command. For example, to install Doctrine ORM module to your web
site (to add the "doctrine/doctrine-module" package to the 
application dependencies), type the following:

`php composer.phar require doctrine/doctrine-module 2.*`

The command above edits `composer.json` file, and downloads and installs the package. We will use this command
later in chapter [Managing Database with Doctrine](#doctrine), when becoming familiar with database management.

### Virtual Packages

Composer can be used to require some functionality to present on your system. You've already seen
how we require "php:^5.6". PHP package is a virtual package representing PHP itself. You can also 
require other stuff, like PHP extensions:

{title="Table 2.3. Virtual Composer Packages"}
|------------------------------------------------------------------------------------------------------|
| *Definition Example*    | *Description*                                                              |
|------------------------------------------------------------------------------------------------------|
| "php":"^5.6"            | Require PHP version greater or equal than 5.6, but lower than 6.0.         | 
|------------------------------------------------------------------------------------------------------|
| ext-dom, ext-pdo-mysql  | Require PHP DOM and PDO MySQL extensions                                   | 
|------------------------------------------------------------------------------------------------------|
| lib-openssl             | Require OpenSSL library                                                    | 
|------------------------------------------------------------------------------------------------------|

You can use `composer show --platform` command to display a list of available virtual packages
for your machine.

### Composer and Version Control Systems

If you are using a version control system (like Git), you will be curious
about what should be stored in Git: your application code only, or your application code
plus all the Composer-installed dependencies in `APP_DIR/vendor` directory?

In general, it is not recommended to store your Composer-dependencies 
under version control, because this can make your repository really big and slow to check out and branch. Instead,
you should store your `composer.lock` file under version control. The `composer.lock`
file guarantees that everyone will install the same versions of dependencies as you have.
This is useful in development teams having more than one developer, because all
developers should have the same code to avoid unwanted issues with environment
misconfiguration.

Q> **What if some dependence will be declared obsolete and removed from Packagist.org?**
Q>
Q> Well, the possibility of package removal is minimum. All packages are free and open-source,
Q> and the community of users can always restore the dependency even if it is removed from packagist.
Q> By the way, the same concept of dependency installation is used in Linux (remember APT or RPM manager?),
Q> so did anyone see any Linux package lost?

But there may be situations when you *should* store some dependent libraries under
version control:

* If you have to make custom changes to third-party code. For example, assume
  you have to fix a bug in a library, and you cannot wait for the library's vendor
  to fix it for you (or if the library vendor cannot fix the bug). In this case,
  you should place the library code under version control to ensure your custom
  changes won't be lost.

* If you have written a reusable module or library and want to store it in the `vendor`
  directory without publishing it on *Packagist.org*. Because you don't have an ability
  to install this code from the Packagist, you should store it under version control.

* If you want a 100% guarantee that a third-party package won't be lost. Although
  the risk is minimum, for some applications it is critical to be autonomous and
  not depend on package availability on *Packagist.org*.

## Summary

In this chapter, we have downloaded the Zend Skeleton Application project 
code from GitHub and installed it via Composer dependency manager. 
We've configured the Apache Virtual Host to tell the web server about location
of the web site's document root directory.

The skeleton application demonstrates the recommended directory structure of a typical web site. 
We have the `public` directory containing files publicly accessible by site users, including the `index.php` 
entry point file, CSS files, JavaScript files and images. All other directories of the
application are inaccessible by site users and contain application configuration, data and
modules.

In the second part of the chapter we discussed some advanced Apache configuration. For example, you 
can protect your web site with password and
allow accessing it from certain IP addresses only.

The Composer dependency manager is a powerful tool for installing the dependencies of 
your web site. For example, Zend Framework 3 itself can be considered as a dependency. 
All packages installable by Composer are registered in a centralized catalog on the 
Packagist.org site.
