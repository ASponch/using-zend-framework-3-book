{mainmatter}

# Введение в Zend Framework 3 {#intro}

В этой главе вы узнаете о Zend Framework 3, его основных принципах и компонентах.

## Что такое Zend Framework 3?

PHP - это популярный язык для разработки веб сайтов. Однако, писать сайты на "чистом" PHP сложно.
Когда вы пишете веб приложение на PHP, вам приходится организовывать свой код каким-либо способом,
собирать и проверять данные, введенные пользователем, реализовывать аутентификацию и авторизацию,
взаимодействовать с базой данных, тестировать свой код и т.д. Когда ваш сайт растет в размерах, 
становится все сложнее разрабатывать код таким образом. Более того, когда вы переключитесь на разработку
другого сайта, вы заметите, что большая часть кода, написанного для старого сайта, может быть использована
повторно с маленькими изменениями. Этот код может быть выделен в библиотеку. Так и появились фреймворки.

Фреймворк - это библиотека, кусок программного обеспечения, также написанный на PHP, предоставляющий
разработчикам базу и стандартные пути для создания веб приложений.

Zend Framework 3 - это бесплатный PHP фреймворк с открытым исходным кодом. Его разработка направляется и 
спонсируется компанией Zend Technologies, также разработавшей и сам язык PHP. Первая версия (Zend Framework 1)
была выпущена в 2007; Zend Framework 2, вторая версия этого ПО, была выпущена в сентябре 2012. Zend Framework 3
(или коротко ZF3) была выпущена в июне 2016.

Zend Framework 3 предоставляет вам следующие возможности:

* Разрабатывайте свой веб сайт гораздо быстрее, чем вы бы это делали на чистом PHP. ZF3 предоставляет
  много компонентов, которые могут использоваться как база для создания сайтов.
  
* Более простое взаимодействие с членами вашей команды. Шаблон "Модель-Вид-Контроллер", используемый в
  ZF3, позволяет разделять бизнес-логику и слой презентации, делая структуру кода более однообразной и
  управляемой.
  
* Масштабируйте ваш веб сайт, используя концепцию модулей. ZF3 использует термин *модуль*, позволяющий разделять
  слабо связанные части сайта, таким образом повторно используя классы моделей, вида и контроллеров в других
  ваших работах.
  
* Получайте доступ к базе данных в объектно-ориентированном стиле. Вместо того, чтобы напрямую взаимодействовать
  с БД посредством SQL-запросов, используйте Doctrine Object-Relational Mapping (ORM), чтобы управлять
  структурой и отношениями ваших данных. С Doctrine вы работаете с таблицей БД как с классом на языке PHP,
  также называемый классом "сущности" (entity), а строка из таблицы БД представляется экземпляром такого класса.
  Doctrine позволяет абстрагироваться от типа БД и одинаково работать, например с MySQL и PostgreSQL.
  
* Создавайте безопасные веб сайты с использованием таких компонентов, как фильтры (filters) и валидаторы (validators) форм, 
  HTML output escapers и крипто алгоритмы,
  human check (Captcha) и Cross-Site Request Forgery (CSRF) элементы форм.
  
## Лицензия

Zend Framework 3 распространяется по лицензии BSD, позволяя вам свободно использовать его как в коммерческих,
так и в бесплатных приложениях. Вы можете модифицировать код фреймворка и даже выпустить его под другим названием.
Единственное, что вы не можете сделать, это удалить copyright notice из файлов фреймворка. Если вы 
используете Zend Framework 3, также рекомендуется указать это в документации к сайту или на странице "About".

Ниже вы можете найти полную лицензию Zend Framework 3. 

{line-numbers=off,lang=text}
~~~
Copyright (c) 2005-2016, Zend Technologies USA, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions 
are met:

	* Redistributions of source code must retain the above copyright 
	  notice, this list of conditions and the following disclaimer.

	* Redistributions in binary form must reproduce the above copyright 
	  notice, this list of conditions and the following disclaimer in 
	  the documentation and/or other materials provided with the 
	  distribution.

	* Neither the name of Zend Technologies USA, Inc. nor the names of 
	  its contributors may be used to endorse or promote products 
	  derived from this software without specific prior written 
	  permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
~~~

## Пользовательская поддержка

Support is an important thing to consider when deciding whether to use
the framework as the base for your web site or not. Support includes well 
written documentation, webinars, community forums
and (optionally) commercial support services, like trainings and 
certification programs.

![Zend Framework official project web site](images/intro/zend_framework_site.png)

*Documentation*. Documentation for Zend Framework is located by [this address](http://framework.zend.com/learn/).
It includes beginner's tutorial, programmers manual, and API reference 
(API stands for Application Programming Interface).

*Community Forums*. Zend Framework has dedicated user groups all over the world.
The list of groups can be found on [this page](http://framework.zend.com/participate/user-groups).

*Webinars* are video tutorials covering various Zend Framework features. Complete list of webinars
can be found by [this link](http://www.zend.com/en/resources/webinars/framework).

*Training Classes* with live instructors can be accessed by 
[this link](http://www.zend.com/en/services/training/course-catalog/zend-framework-2).
Here you can learn Zend Framework by doing exercises, 
mini-projects and developing real code. 

*Certification Program*. Allows you to become a Zend Certified Engineer (ZCE),
thus making it easier to improve your skills as an architect and to find a job in a 
competitive PHP job market. 

## Исходный код фреймворка

Исходный код Zend Framework 3 хранится на хостинге GitHub внутри [GIT-репозитариев](https://github.com/zendframework). 
На каждый компонент ZF3 приходтся по одному репозитарию.

I> В большинстве случаев вам не нужно скачивать код Zend Framework 3 вручную.
I> Вместо этого, вы будете устанавливать его с помощью менеджера зависимостей Composer. Мы
I> познакомимся с Composer поближе в главе под названием [Zend Skeleton Application](#skeleton). 

## Поддерживаемые операционные системы

Как и любой PHP веб-сайт, ваш веб-сайт на основе ZF3 будет работать на сервере Linux или под управлением
любой другой операционной системы, где работает PHP. Например, для создания примеров для этой книги автор
использовал ОС Ubuntu Linux.

Если вы еще не знаете какую ОС использовать для веб разработки, рекомендуется использовать Linux,
потому что большинство серверных систем работают под управлением ОС Linux. Вы можете обратиться к 
[Приложению A](#appendix-a), чтобы получить инстркуции по установке и настройке рабочей среды.

## Системные требования

Zend Framework 3 требует, чтобы ваш сервер имел установленную версию PHP 5.6 (либо выше).
Обратите внимание, что это довольно жесткое требование. Не все дешевые хостинги и не все приватные
серверы имеют такую новую версию PHP.

Более того, рекомендованный способ установки ZF3 (и других компонентов, от которых зависит ваше
приложение) - это установка посредством [Composer](http://getcomposer.org/).
Это требует доступа к терминалу (SSH). Некоторые дешевые хостинги предоставляют только FTP  доступ.

ZF3 использует модуль Apache `mod_rewrite` для перенаправления пользователей на скрипт входа для вашего
сайта (site entry script). Вам также может понадобиться установить некоторые расширения PHP, например 
`xdebug` или `memcached`. Это может быть сложно, когда вы используете веб хостинг, потому что для этого
требуется доступ к серверу через SSH терминал.

Так что, если вы планируете использовать ZF3 на веб хостинге, подумайте дважды. Лучший сервер, на который
можно установить ZF3 - это сервер с последней версией PHP и с SSH-доступом, чтобы можно было запустить
Composer и установить расширения PHP.

Если ваша компания имеет свою серверную инфраструктуру и может позволить себе апгрейдить версию PHP,
установите ZF3 на этот частный сервер.

Приемлемая альтернатива - это установка сайта в облаке, таком как [Amazon Web Services](http://aws.amazon.com/). 
Amazon позволяет арендовывать виртуальные машины на базе ОС Linux (сервис EC2). EC2 довольно дешев и
предоставляет бесплатный [пробный период в течение 1 года](http://aws.amazon.com/free/).

## Безопасность

Zend Framework 3 следует наилучшим практикам, чтобы дать вам безопасную базу для создания собственных
веб-сайтов. Создатели ZF3 регулярно выпускают обновления безопасности. Вы можете встроить эти обновления
в свой сайт одной командой через Composer.

ZF3 предоставляет следующие средства обеспечения безопасности веб-сайта:

* *Маршрутизация запросов (Routing)* позволяет задавать строгие правила, как должен выглядеть приемлемый URL
  адрес веб-страницы. Если пользователь вводит неверный URL адрес в строку навигации браузера, он автоматически
  направляется на страницу с сообщением об ошибке.

* *Списки контроля доступа (Access control lists)* и *Доступ на основе ролей (Role-Based Access Control, RBAC)* 
  позволяют задавать правила для разрешения или запрета на доступ к конкретным ресурсам вашего веб-сайта. Для примера,
  анонимный пользователь сможет получить доступ только к главной странице сайта, авторизованный пользователь сможет
  получить доступ к личной странице, а администратор сможет получить доступ к панели управления сайтом.
  
* *Валидаторы (validators) и фильтры (filters) веб-форм* позволяют быть уверенными в том, что вредные
  данные, введенные пользователем, не пройдут через веб-форму. Фильтры, например, позволяют обрезать 
  введенную строку или удалять из нее HTML тэги. Валидаторы используются, чтобы удостовериться, что 
  данные, отправленные через веб-форму, отвечают неким правилам. Например, E-mail валидатор проверяет,
  что поле электронного почтового адреса содержит правильный адрес, а если нет, выдает сообщение об
  ошибке и требует ввести корректные данные.

* Элементы формы *Captcha* и *CSRF* (Cross-Site Request Forgery) используются для предотвращения хакерских атак.

* Компонент *Escaper* позволяет вырезать нежелательные тэги HTML из данных, выводимых на веб-страницу.
  
* *Поддержка криптографии* позволяет хранить важные данные, такие как пароли, зашифрованными стойкими крипто
  алгоритмами, которые сложно взломать.

## Производительность

ZF3 обладает следующими свойствами, гарантирующими приемлемую производительность (performance): 

*Ленивая загрузка классов (Lazy class autoloading).* Классы загружаются только тогда, когда это нужно.
Вам не нужно писать `require_once` для каждого класса, который вы хотите загрузить. Вместо этого, фреймворк
автоматически обнаруживает ваши классы, используя *автозагрузку* (autoloader).

*Эффективная загрузка сервисов и плагинов.* В ZF3 классы бизнес-логики инстанциируются только когда это
действительно необходмо. Это достигается посредством менеджера сервисов (service manager), центрального
репозитария всех сервисов приложения.
  
*Поддержка кеширования.* PHP имеет несколько расширения для кеширования (таких, как Memcached), которые
могут использоваться для ускорения сайтов, созданных на основе ZF3. 

## Шаблоны проектирования

Разработчики Zend Framework 3 являются большими фанатами разнообразных шаблонов проектирования. Хотя вам
не нужно понимать шаблоны проектирования, чтобы читать эту книгу, в этой секции мы кратко перечислим
основные шаблоны, на которых основан ZF3.

* *Модель-Вид-Контроллер (Model-View-Controller, MVC)*. Шаблон Model-View-Controller используется во
  всех современных PHP фреймворках. В приложении MVC вы разделяете код на три категории: модели (ваша
  бизнес-логика), вид (презентация) и контроллеры (код, отвечающий за взаимодействие с пользователем).
  Такое разделение также называется *separation of concerns*. С MVC вы можете *повторно использовать* 
  компоненты этой триады в других проектах. Также лего заменить любую часть триады. Например, вы можете
  легко заменить вид другим видом, без изменения бизнес-логики.
  
* *Проектирование на основе Предметной Области (Domain Driven Design, DDD)* В Zend Framework 3 вы будете
  делить слой моделей еще глубже на *сущности (entities)*, т.е. классы, работающие с таблицами БД, *репозитарии (repositories)*,
  т.е. классы, позволяющие доставать сущности из БД, *объекты-значения (value objects)*, т.е. классы
  моделей, не имеющие идентификатора, и *сервисы (services)*, то есть классы, отвечающие за бизнес-логику.
  Дополнительно вы будете иметь *веб-формы (forms)*, т.е. классы моделей, ответственные за ввод данных пользователя,
  помощники вида (view helpers), т.е. повторно используемые плагины, предназначенные для отображения
  различного контента на веб-странице, и, вероятно, другие типы моделей.

* *Шаблон Aspect Oriented Design.* В ZF3 все основано на событиях (events). Когда пользователь запрашивает
  веб-страницу, генерируется событие. Наблюдатель (observer) может реагировать на событие. Например,
  компонент `Router` разбирает URL на части и определяет, какой контроллер нужно вызвать. Когда событие
  наконец достигает визуализатора (renderer), генерируется HTTP ответ, и пользователь видит результирующую
  веб-страницу.  

* *Шаблон Singleton.* В ZF3 существует такой объект как менеджер сервисов (service manager), который является
  централизованным хранилищем всех сервисов, имеющихся в приложении. Каждый сервис существует только в *одном*
  экзепляре. 

* *Шаблон Strategy.* Стратегия - это всего лишь класс, инкапсулирующий какой-либо алгоритм. И вы можете
  использовать разные алгоритмы, если срабатывают определенные условия. Например, визуализатор (renderer)
  имеет несколько стратегий для визуализации веб-страницы (например, он может сгенерировать HTML страницу, 
  JSON массив или RSS feed, основываясь на заголовках HTTP запроса).
  
* *Шаблон Adapter.* Адаптеры позволяют адаптировать класс общего назначения к конкретному случаю использования.
  Например, компонент `Db` предоставляет доступ к базе данных независимо от типа СУБД. Внутри себя,
  он использует адаптеры для каждой поддерживаемой СУБД (SQLite, MySQL, PostgreSQL и т.д.)
  
* *Шаблон Factory.* Вы можете создать экземпляр класса посредством оператора `new`. Или вы можете
  создать его с помощью фабрики. Фабрика - это всего лишь класс, занимающийся созданием других объектов.
  Фабрики полезны, так как упрощают внедрение зависимостей (dependency injection). Это также упрощаяет
  тестирование ваших моделей и контроллеров.

## Основные компоненты ZF3

Создатели ZF3 считают, что фреймворк должен быть набором слабо связанных компонентов с минимумом 
зависимостей друг от друга. Это и есть способ организации ZF3. 

Идея состоит в том, чтобы дать вам использовать выбранные компоненты ZF3 как в составе MVC-фреймворка,
так и по-одиночке. Это делается очень просто, если вспомнить, что каждый компонент - это пакет, устанавливаемый
с помощью Composer, так что вы можете установить его одной командой.

Есть несколько "главных" компонентов ZF3, которые используются явно или неявно практически в любом веб-приложении, 
и поэтому их важно знать:

  * `EventManager` позволяет создвать события (events) и регистрировать обработчики событий. 
     
  * `ModuleManager` В сайтах, созданных на базе ZF3, все состоит из модулей, и этот компонент позволяет
    загружать модули.                                                  

  * `ServiceManager`  Это центральный репозитарий всех сервисов, доступных в приложении. В сервисах содержится
    бизнес-логика приложения.
   
  * `Http` предоставляет простой интерфейс для работой с Hyper-Text Transfer Protocol (HTTP) 
    запросами.                              
     
  * `Mvc` Поддержка шаблона Модель-Вид-Контроллер (Model-View-Controller). 

  * `View` Предоставляет систему помощников (view helpers) и output escapers. Используется в слое представления (вида). 

  * `Form` Помогает собирать данные, введенные пользователем, а также фильтровать их, проверять на корректность и
    отображать формы на веб-странице.

  * `InputFilter` Позволяет задавать правила фильтрации и валидации для данных, введенных пользователем в веб-форму.
    
  * `Filter` Предоставляет набор часто используемых фильтров, таких как string trimmer.

  * `Validator` Предоставляет набор часто используемых валидаторов. 

## Отличия от Zend Framework 2

For readers who have an experience in Zend Framework 2, in this section we'll
give some information on what has changed in Zend Framework 3.

Below, the main technical differences between ZF2 and ZF3 are presented:

### Backwards Compatibility

ZF3 is an evolutionary release, so backwards compatibility is preserved in most cases. However,
some migration work still has to be done if you used `ServiceManagerAwareInterface` across your
code (which you probably did). In ZF3, this interface has been removed, and now all dependencies must be injected through
factories. So, you'll have to create factories for all your controllers, services, view helpers and
controller plugins. 

### Components

In ZF2, components were stored in a single repository named `zendframework/zf2`.
In ZF3, components are stored in GIT repositories, one repository per component (for example, 
`zendframework/zend-mvc`, `zendframework/zend-servicemanager`, `zendframework/zend-form`, etc). 
This allows to develop and release components
independently of each other.

Components are even more decoupled than before and have minimum dependencies on each other. `Mvc` component
has been splitted into several ones. For example, routing functionality has been moved to new `Router` component.

You are now recommended to specify individual component names your app depends on in `composer.json`, 
although it is still possible to depend on `zendframework/zendframework` package, which is a meta package 
installing *all* available components.

### Component Installer

In ZF3, a special Composer plugin called *component installer* was introduced. It allows to install 
components as ZF modules. It injects information about the component into application configuration
file.

### ServiceManager and EventManager Performance

ZF3 developers did a great job improving performance of `ServiceManager` and `EventManager` components.
They are now about several times faster than before. The disadvantage is that you now have to do some migration
work to use the new functionality. Controller and service names are now recommended to utilize
the PHP 5.5 feature called `::class`. For example, if previously you registered your controller as `Application\Controller\Index`,
now you will register it as `IndexController::class`. If previously you registered service names as you wished,
now you are recommended to do that using `ServiceClassName::class`. Read the documentation for `Mvc`
component for additional information.

### PSR-4

In ZF2, the recommended directory structure was PSR-0, while in ZF3 it is PSR-4. This requires some
(small) migration work.

### Middleware 

Zend thinks that the future of PHP is in middleware. "Middleware is, quite simply, code sitting between 
an incoming HTTP request, and the outgoing HTTP response." Now you can register a middleware listener
in an MVC application. 

### Focus on Documentation

Now each component repository contains its own documentation. Documentation is now in Markdown format 
and has become better designed.  
  
## Выводы

PHP-фреймворк - это библиотека, дающая разработчикам базу и стандартные пути для создания веб-приложений.
Zend Framework 3 - это современный фреймворк, созданный под руководством компании Zend Technologies,
производителя языка PHP. Этот фреймворк дает разработчикам выдающиеся возможности для создания масштабируемых
и безопасных веб-сайтов. ZF3 распространяется под лицензией BSD и может свободно использоваться как
в коммерческих, так и в бесплатных веб-приложениях.

